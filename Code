# Importing libraries used
from tkinter import *
import re
import long as long

# Initializing screen
root = Tk()

# Functions to show the response of both the bot and the user
def message(response):

    # Geting user message
    send = "You:"+ e.get()

    # Showing user message
    text.insert(END,"\n" + send)

    # Showing bot response
    text.insert(END,"\n" + "BOT:" + response)

# Takes the user's message and calculates the response
def message_probability(user_message, recognised_words, single_response=False, required_words=[]):

    # Checks which message to be sent
    message_certainty = 0

    # Checks if the message has required words for a certain response
    has_required_words = True

    # Counts how many words are present in each predefined message
    for word in user_message:
        if word in recognised_words:

            # If there are word in the message the certainty increases
            message_certainty += 1

    # Calculates the percent of recognised words in a user message
    percentage = float(message_certainty) / float(len(recognised_words))

    # Checks that the required words are in the string
    for word in required_words:
        if word not in user_message:
            has_required_words = False
            break

    # Must either have the required words, or be a single response
    if has_required_words or single_response:

        # returns certainty of each response
        return int(percentage * 100)
    else:

        # Returns 0 if all conditions are false
        return 0

        # if certainty is 0 long messages will be shown from other file

# Checks the message
def check_all_messages(message):

    # dictionary is created
    highest_prob_list = {}

    # Simplifies response creation / adds it to the dict
    def response(bot_response, list_of_words, single_response=False, required_words=[]):
        nonlocal highest_prob_list

        # sends the words, dictionary,boolean value and the required words to calculate probability of a response
        highest_prob_list[bot_response] = message_probability(message, list_of_words, single_response, required_words)

    # Responses -------------------------------------------------------------------------------------------------------
    # Required word indicates wether the response is appropriate
    response('Hello!', ['hello', 'hi', 'hey', 'sup', 'heyo'], single_response=True)
    response('See you!', ['bye', 'goodbye'], single_response=True)
    response('I\'m doing fine, and you?', ['how', 'are', 'you', 'doing'], required_words=['how'])
    response('You\'re welcome!', ['thank', 'thanks'], single_response=True)
    response('Thank you!', ['i', 'love', 'code', 'palace'], required_words=['code', 'palace'])

    # Longer responses
    # If you ask for advice or something about eating
    response(long.R_ADVICE, ['give', 'advice'], required_words=['advice'])
    response(long.R_EATING, ['what', 'you', 'eat'], required_words=['you', 'eat'])

    # Checks the best match and uses dictionary to keep the response
    best_match = max(highest_prob_list, key=highest_prob_list.get)

    # Returns the response
    return long.unknown() if highest_prob_list[best_match] < 1 else best_match

# Gets response from user
def get_response():

    # Checks what user has typed
    user_input = e.get()

    # splits the message into words
    split_message = re.split(r'\s+|[,;?!.-]\s*', user_input.lower())

    # Calls the function that checks the message with split message
    response = check_all_messages(split_message)
  
    # Response is sent to be shown
    message(response)


# Background color
text = Text(root,bg='white')

# The placement of the text box
text.grid(row=0,column=0,columnspan=2)

# Type of text and it's width
e = Entry(root,width=25,font=('Arial 25'))

# Gets user message and calls the first 'get_response' function
send = Button(root,text='Send',bg='blue',width=15,height = 5,command=get_response).grid(row=1,column=1)
e.grid(row=1,column=0)

# Title of the window
root.title('TKINTER CHATBOT')

# The loop which keeps the bot running
root.mainloop()
